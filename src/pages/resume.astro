<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Biraj" />
    <title>Biraj's</title>

    <!-- Favicon -->
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png" />
    <link rel="manifest" href="/favicon/site.webmanifest" />
  </head>
  <body>
    <main>
      <h1 class="no-print">welcome to Biraj's</h1>
      <p class="no-print">
        i know a little bit about software engineering. i play chess (1900 rapid on
        <a href="https://lichess.org/@/biraj21" target="_blank">lichess</a>) and badminton. i sometimes read
        <a href="https://www.goodreads.com/user/show/189947877-biraj" target="_blank">books</a>.
      </p>

      <h1 class="print-only">Biraj</h1>
      <p>
        <a href="mailto:biraj.pub@gmail.com" class="print-only">biraj.pub@gmail.com</a>
      </p>
      <!-- <p class="print-only">biraj.pub@gmail.com</p> -->

      <section id="socials">
        <a href="https://github.com/biraj21" target="_blank">
          <img src="/images/icons/github.svg" alt="GitHub" />
          <span class="print-only">github.com/biraj21</span>
        </a>
        <a href="https://twitter.com/biraj21_" target="_blank">
          <img src="/images/icons/twitter.svg" alt="Twitter" />
          <span class="print-only">twitter.com/biraj21_</span>
        </a>
        <a href="https://lichess.org/@/biraj21" target="_blank" class="no-print">
          <img src="/images/icons/lichess.svg" alt="Lichess" />
          <span class="print-only">lichess.org/@/biraj21</span>
        </a>
        <a href="https://www.linkedin.com/in/biraj21/" target="_blank">
          <img src="/images/icons/linkedin.svg" alt="LinkedIn" />
          <span class="print-only">linkedin.com/in/biraj21</span>
        </a>
      </section>

      <hr />

      <section id="work-experience">
        <h2>work experience</h2>
        <small class="no-print">(you can click on the role summary to see the details)</small>

        <ul>
          <li class="work">
            <h3>
              <span>Outspeed</span>
              <small>
                <time datetime="2024-09-01">sept 2024</time>
                -
                <span>present</span>
              </small>
            </h3>
            <ul>
              <li>
                <h4>
                  founding engineer
                  <small>
                    <time datetime="2024-09-01">sept 2024</time>
                  </small>
                </h4>

                <details>
                  <summary>
                    Realtime voice AI at
                    <a href="https://outspeed.com" target="_blank">Outspeed</a>.
                  </summary>
                  <ul>
                    <li>
                      built
                      <em>intelligent voice assistant with contextual awareness</em>
                      using tool calling architecture that determines when to respond, skip turns, or end conversations based
                      on user intent and conversation context, preventing interruptions during background conversations.
                    </li>
                    <li>
                      built
                      <em>voice AI interaction system by deploying open-source models</em>
                      with streaming inference, voice activity detection and interrupts. it uses webrtc and a multi-threaded,
                      event-driven architecture.
                    </li>
                    <li>
                      designed the system to be
                      <em>compatible with OpenAI Realtime API specifications</em>, allowing users to integrate it using
                      the same event structure and protocols as OpenAI's. also built
                      <a href="https://github.com/outspeed-ai/voice-devtools" target="_blank">voice devtools</a>
                      (<a href="https://dashboard.outspeed.com/" target="_blank">live here</a>) for debugging.
                    </li>
                    <li>
                      implemented realtime Voice Activity Detection (VAD) using
                      <em>Silero VAD for audio stream processing</em>. it handles user interrupts. also implemented
                      semantic VAD, where the model is less likely to interrupt the user during a speech-to-speech
                      conversation.
                    </li>
                    <li>
                      set up <em>log shipping pipeline</em> to send logs of our users' programs from our cloud to Loki on
                      Grafana, then established a websocket connection from the backend to Loki and streamed the logs to
                      the frontend using server-sent events.
                    </li>
                    <li>
                      created Terraform configurations to
                      <em>deploy a Nomad cluster on AWS</em>, including EC2 instances with cloud-init scripts, S3
                      buckets, Redis ElastiCache, ECR, IAM roles for EC2s, etc.
                    </li>
                  </ul>
                </details>
              </li>
            </ul>
          </li>
          <li class="work">
            <h3>
              <span>LaneSquare Technology Pvt. Ltd.</span>
              <small>
                <time datetime="2023-02-20">feb 2023</time>
                -
                <time datetime="2024-09-06">sept 2024</time>
              </small>
            </h3>
            <ul>
              <li>
                <h4>
                  software developer
                  <small>
                    <time datetime="2023-09-01">sept 2023</time>
                    -
                    <time datetime="2023-09-06">sept 2024</time>
                  </small>
                </h4>

                <details>
                  <summary>
                    built
                    <a href="https://thinkstack.ai" target="_blank">thinkstack.ai</a>, a platform where businesses can
                    create AI chatbots to automate customer support.
                  </summary>
                  <ul>
                    <li>
                      implemented <em>Retrieval Augmented Generation (RAG)</em> in Thinkstack: chunking user data, generating
                      embeddings, and storing them in Pinecone (and later querying them with similarity search of course).
                    </li>
                    <li>
                      built user <em>intent detection</em> system using GPT's function calling. given a set of intents, it
                      identifies appropriate action to be taken, such as collecting user details, creating tickets, handing
                      off to a human, etc.
                    </li>
                    <li>
                      developed <em>Thinkstack's backend and frontend</em> (<a
                        href="https://app.thinkstack.ai/login"
                        target="_blank">app.thinkstack.ai</a
                      >). worked with Node.js, GraphQL, Flask (Python), Redis, React.js (Next.js SSG), Tailwind CSS and
                      AWS (Cognito, S3, API Gateway, CloudFormation etc).
                    </li>
                    <li>
                      created an event notification system using
                      <em>pub/sub to send backend events</em> (e.g., website crawling completion) to the frontend, which
                      uses a React context provider i wrote to consume these events and perform some actions.
                    </li>
                    <li>
                      built
                      <em>sub-users, roles and permissions management</em> system for the app - both backend and frontend.
                      same for human handoff flow.
                    </li>
                    <li>
                      created Zapier, Slack, WhatsApp, Facebook Messenger and Instagram integrations for Thinkstack.
                      also built its
                      <em>API key management</em> system for authentication. users can use their API keys to authenticate
                      themselves at Zapier's Thinkstack integration.
                    </li>
                  </ul>
                </details>
              </li>
              <li>
                <h4>
                  software developer intern
                  <small>
                    <time datetime="2023-02-20">feb 2023</time>
                    -
                    <time datetime="2023-08-31">aug 2023</time>
                  </small>
                </h4>
                <details>
                  <summary>
                    migrated
                    <a href="https://www.pickcel.com/" target="_blank">Pickcel</a>'s backend codebase from node 12 to
                    node 18. also learnt Docker.
                  </summary>
                  <ul>
                    <li>
                      worked with TypeScript, Node.js, and Mongoose to update and
                      <em>optimize existing REST APIs by adding concurrency</em>. set up integration testing using Jest,
                      SuperTest and GitHub Actions.
                    </li>
                    <li>
                      <em>optimized Dockerfile for our on-premise setup</em> by properly reordering layers, reducing consecutive
                      build times and improving cache utilization. also added redis to the stack.
                    </li>
                    <li>
                      introduced <em>semantic git commits</em>, coding conventions, and structure, which is now embraced
                      by all developers in the organization.
                    </li>
                  </ul>
                </details>
              </li>
            </ul>
          </li>
        </ul>
      </section>

      <hr />

      <div class="print-only">
        <section id="skills">
          <h2>skills</h2>
          <ul>
            <li>
              <strong>programming languages:</strong>
              <span>JavaScript, TypeScript, Python, Go, C, Bash</span>
            </li>
            <li>
              <strong>libraries and frameworks:</strong>
              <span>React, Node.js, Express.js, Flask, FastAPI, GraphQL</span>
            </li>
            <li>
              <strong>tools and infra:</strong>
              <span>Docker, AWS, Terraform, Firebase, Git, Linux, GitHub Actions</span>
            </li>
            <li>
              <strong>database:</strong>
              <span>MySQL/MariaDB, MongoDB, Redis, SQLite, Firestore</span>
            </li>
          </ul>
        </section>

        <hr />
      </div>

      <section id="projects">
        <h2>projects</h2>
        <div class="project">
          <h3>
            Obsy: AI observability platform
            <img src="/images/icons/nextjs.svg" alt="Next.js" />
            <img src="/images/icons/nodejs.svg" alt="Node.js" />
            <img src="/images/icons/typescript.svg" alt="TypeScript" />
          </h3>
          <p>
            Obsy is an AI observability tool that provides insights into AI operations. created a Node.js SDK that
            automatically instruments OpenAI completions and Pinecone queries. the dashboard shows API routes and their
            AI operations flow, including timing and usage metrics for each stage. built this as a hackathon project in
            15 hours.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/obsy" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            NumPy from scratch in Go
            <img src="/images/icons/go.svg" alt="Go" />
          </h3>
          <p>
            i was implementing Neural Networks from scratch in Go and as a byproduct of it, i created my own version of
            NumPy for tensor operations like +, -, *, /, matrix multiplication, transpose etc. it also supports
            <a href="https://numpy.org/doc/stable/user/basics.broadcasting.html">broadcasting</a>.
            <br />
            <a
              class="project__source-code"
              href="https://github.com/biraj21/neural-networks-from-scratch"
              target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            tensor visualizer
            <img src="/images/icons/javascript.svg" alt="JavaScript" />
          </h3>
          <p>
            a tool that helps you visualize multi-dimensional arrays. uses HTML canvas for rendering the image. i wrote
            this when i was trying to understand neural networks.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/array-visualizer" target="_blank"></a>
            <span class="separator-bar">|</span>
            <a href="https://arrayvis.netlify.app/" target="_blank">try it</a>
          </p>
        </div>
        <div class="project">
          <h3>
            AI search
            <img src="/images/icons/javascript.svg" alt="C" />
          </h3>
          <p>
            an AI search tool (like
            <a href="https://perplexity.ai" target="_blank">Perplexity</a>) that pulls data from
            <a href="https://developers.google.com/custom-search/v1/overview" target="_blank"
              >Google Custom Search JSON API</a
            >
            and uses Llama 3 to generate answer with citations.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/ai-search" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            TCP server
            <img src="/images/icons/c.svg" alt="C" />
          </h3>
          <p>
            a single-threaded TCP server written in C with an event loop using the
            <code>poll()</code> system call, without any third-party library. the server listens on a port and echoes back
            received data. i've also written a simple client to test the server.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/tcp-server" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            gomon: nodemon for Go files
            <img src="/images/icons/go.svg" alt="Go" />
          </h3>
          <p>
            a CLI took to run Go programs in watch mode. to watch for changes, it uses <code>kqueue()</code> system call
            on macOS and <code>inotify</code> on Linux. no 3rd-party dependencies.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/gomon" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            focker: Linux containers
            <img src="/images/icons/go.svg" alt="Go" />
          </h3>
          <p>
            Focker is a toy container runtime written in Go. it is based on Ubuntu 22.04 rootfs. this was an attempt to
            understand how Docker works internally.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/focker" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            web wanderer
            <img src="/images/icons/python.svg" alt="Python" />
          </h3>
          <p>
            a multi-threaded web crawler written in Python. uses
            <code>concurrent.futures.ThreadPoolExecutor</code> and
            <a href="https://playwright.dev/" target="_blank">Playwright</a> to crawl and download web pages. it handles
            dynamically rendered websites, making it capable of extracting content from sites written in React, Vue, etc.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/web-wanderer" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            JSON parser
            <img src="/images/icons/go.svg" alt="Go" />
          </h3>
          <p>
            a JSON parser written in Go from scratch. prints error message with line and column number.
            <a href="https://github.com/eatonphil" target="_blank">Phil Eaton</a>'s
            <a href="https://notes.eatonphil.com/writing-a-simple-json-parser.html" target="_blank">blog post</a>
            helped me write the lexer and parser. it was fun.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/json-parser" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            texterm
            <img src="/images/icons/c.svg" alt="C" />
          </h3>
          <p>
            a minimal, nano-like text editor written in C from scratch. i followed
            <a href="https://viewsourcecode.org/snaptoken/kilo/" target="_blank">Build Your Own Text Editor</a>
            article. learnt a lot about C and linux terminals during this.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/texterm" target="_blank"></a>
          </p>
        </div>

        <div class="project">
          <h3>
            brainfuck interpreter
            <img src="/images/icons/c.svg" alt="C" />
          </h3>
          <p>
            a
            <a href="https://en.wikipedia.org/wiki/Brainfuck" target="_blank">Brainfuck</a>
            interpreter in C that combines repeated instructions, like
            <code>+++++ +++++</code> into <code>&lbrace; '+' : 10 &rbrace;</code>, speeding up execution. it can also
            transpile Brainfuck code to C.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/brainfuck-interpreter" target="_blank"></a>
          </p>
        </div>
        <div class="project">
          <h3>
            findREp
            <img src="/images/icons/python.svg" alt="Python" />
          </h3>
          <p>
            a GUI tool written with Tkinter in Python to find and replace all the matches of a regular expression in
            files and folders (recursively). i wrote this because i wasn't aware of VS Code's search functionality at
            the time.
            <br />
            <a class="project__source-code" href="https://github.com/biraj21/findrep" target="_blank"></a>
          </p>
        </div>
      </section>

      <hr />

      <section id="blogs">
        <h2>blogs</h2>

        <ul>
          <li>
            <a href="/blogs/empty-strings-and-zero-length-arrays.html"
              >Empty Strings and Zero-length Arrays: How do We Store... Nothing?</a
            >
          </li>
          <li>
            <a href="https://dev.to/biraj21/introduction-to-numpy-31md" target="_blank">Introduction to NumPy</a>
          </li>
          <li>
            <a href="https://dev.to/biraj21/javascript-array-methods-understand-by-implementing-54g3" target="_blank"
              >Understand JavaScript Array Methods By Implementing Them</a
            >
          </li>
          <li>
            <a href="https://biraj21.medium.com/what-are-pointers-in-c-d21efd5e41dc" target="_blank"
              >What are Pointers in C? (shallow explanation)</a
            >
          </li>
        </ul>
      </section>

      <hr class="no-print" />

      <footer class="no-print">
        <a href="mailto:biraj.pub@gmail.com">biraj.pub@gmail.com</a>
        <p>no copyright. feel free to copy this stunning website.</p>
        <p>
          ps: wanna check out the inferior version of this site? head over to
          <a href="https://biraj21.netlify.app" target="_blank">biraj21.netlify.app</a>.
        </p>
      </footer>
    </main>

    <script is:inline>
      document.querySelectorAll("a.project__source-code").forEach(($a) => ($a.innerHTML = "&rarr; source code"));

      // open all details elements before opening print dialog to ensure that all content is printed
      window.addEventListener("beforeprint", () => {
        document.querySelectorAll("details").forEach(($details) => $details.setAttribute("open", "open"));
      });
    </script>
  </body>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  :root {
    font-family: monospace;
  }

  a,
  a:visited {
    color: blue;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 16px 0;
  }

  p,
  [role="paragraph"] {
    margin: 24px 0;
  }

  li {
    margin-bottom: 8px;
  }

  /* allow long words to break in inline <code> */
  code {
    word-break: break-word;
  }

  code,
  .code-block {
    background-color: #d3d3d3;
    padding: 1px 2px;
    border-radius: 2px;
  }

  .code-block {
    display: block;
    margin: 8px 0 16px;
    padding: 8px;
    word-break: normal;
    white-space: pre;
    overflow: auto;
  }

  blockquote {
    background: #f9f9f9;
    border-left: 8px solid #ccc;
    margin: 16px 0;
    padding: 8px;
  }

  blockquote:before {
    color: #ccc;
    content: open-quote;
    font-size: 3rem;
    line-height: 0.1rem;
    margin-right: 0.25rem;
    vertical-align: bottom;
  }
  /* without this, subsequent <blockquote> elements were starting with only a single quote */
  blockquote:after {
    content: close-quote;
    visibility: hidden;
  }

  hr {
    margin: 24px 0;
  }

  .print-only {
    display: none;
  }

  main {
    max-width: 788px;
    margin: 0 auto;
    padding: 24px;
    text-align: center;
  }

  #socials a {
    margin: 0 8px;
    text-decoration: none;
  }
  #socials a img {
    height: 32px;
  }

  #work-experience ul {
    text-align: left;
  }
  #work-experience .work h3,
  #work-experience .work h4 {
    display: flex;
    justify-content: space-between;
  }
  #work-experience .work h3 small,
  #work-experience .work h4 small {
    text-align: right;
  }
  #work-experience .work details ul {
    margin-top: 8px;
    margin-left: 16px;
  }
  #work-experience .work em {
    font-weight: 600;
  }

  #skills > ul {
    text-align: left;
  }

  #projects .project {
    text-align: left;
  }
  #projects .project h3 {
    margin-bottom: 0;
    display: flex;
    align-items: center;
  }
  #projects .project h3 img {
    height: 14px;
    margin-left: 12px;
  }
  #projects .project p {
    margin-top: 8px;
  }
  #projects .project .project__source-code {
    display: inline-block;
    margin-top: 4px;
  }

  #blogs ul {
    text-align: left;
  }

  span.separator-bar {
    margin: 0 4px;
  }

  @media print {
    #socials a {
      display: inline-flex;
      align-items: center;
    }
    #socials a img {
      height: 16px;
      margin-right: 4px;
    }
  }

  @media print {
    .print-only {
      display: block;
    }

    .no-print {
      display: none !important;
    }
  }
</style>
